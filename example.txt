// inject-component.tsx
function InjectReact({ noteId }: { noteId: string }) {
    const [position, setPosition] = useState(() => {/* ... */});
    const [theme, setTheme] = useState('light');
    const [customColor, setCustomColor] = useState('');
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');

    // Save note data whenever it changes
    useEffect(() => {
        const noteData = {
            id: noteId,
            position,
            theme,
            customColor,
            title,
            content
        };
        
        // Get existing notes
        const existingNotes = JSON.parse(localStorage.getItem('notes') || '[]');
        const updatedNotes = existingNotes.map(note => 
            note.id === noteId ? noteData : note
        );
        
        if (!existingNotes.find(note => note.id === noteId)) {
            updatedNotes.push(noteData);
        }
        
        localStorage.setItem('notes', JSON.stringify(updatedNotes));
    }, [position, theme, customColor, title, content]);

    return (
        <div>
            <input 
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className={style.topbarInput}
            />
            <textarea 
                value={content}
                onChange={(e) => setContent(e.target.value)}
                className={style.textArea}
            />
            {/* ... rest of your component */}
        </div>
    );
}

// popup.tsx
function IndexPopup() {
    const [savedNotes, setSavedNotes] = useState([]);

    useEffect(() => {
        const notes = JSON.parse(localStorage.getItem('notes') || '[]');
        setSavedNotes(notes);
    }, []);

    const handleInject = async () => {
        // Your existing injection code
    };

    const handleLoadNotes = async () => {
        const notes = JSON.parse(localStorage.getItem('notes') || '[]');
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        if (!tab.id) return;

        // Inject each saved note
        notes.forEach(noteData => {
            chrome.tabs.sendMessage(tab.id, { 
                type: "INJECT_COMPONENT",
                noteData
            });
        });
    };

    return (
        <div>
            <button onClick={handleInject}>New Note</button>
            <button onClick={handleLoadNotes}>Load Saved Notes</button>
            {/* Maybe show list of saved notes */}
            <div>
                {savedNotes.map(note => (
                    <div key={note.id}>
                        {note.title || 'Untitled Note'}
                    </div>
                ))}
            </div>
        </div>
    );
}

// content.ts
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === "INJECT_COMPONENT") {
        injectComponent(message.noteData);
    }
});

const injectComponent = (noteData = null) => {
    const noteId = noteData?.id || `note-${noteCounter++}`;
    // ... rest of injection code
    root.render(<InjectReact noteId={noteId} initialData={noteData} />);
};
